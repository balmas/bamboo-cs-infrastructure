#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Utukku
  module Engine
    class Parser < Racc::Parser

module_eval(<<'...end engine-parser.racc/module_eval...', 'engine-parser.racc', 200)
  # == Utukku::Engine::Parser
  #
  # <tt>Utukku::Engine::Parser</tt> provides a parser for Utukku::Engine::Parser operating on a DOM-like data model provided by
  # Utukku::Engine::Memory::Context and Utukku::Engine::Memory::Node.
  #
  # The expression language is based on XQuery and XPath.
  #

  require 'utukku/engine'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  # Within the context of a Utukku::Engine::Memory::Context object, this will
  # parse the given string and return an object that can be run to return
  # an array if Utukku::Engine::Memory::Node objects.
  #
  # Example:
  #
  #   parser  = Utukku::Engine::Parser.new
  #   context = Utukku::Engine::Memory::Context.new
  #   expr    = parser.parse('//foo', context)
  #   foos    = expr.run(context)
  #
  # Results in 'foos' being an array of all of the nodes in the
  # context that are named 'foo' regardless of their depth in the
  # node tree.
  def parse(text, context)
    @source = text
    @curpos = 0
    @context = context #.merge
    @line = 0
    @col = 0

    @yydebug = true

    @last_token = nil

    do_parse
  end

  # Used internally by the parser to raise a Utukku::Engine::ParserError
  # when the parse fails.
  def on_error(*args)
    raise Utukku::Engine::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|\/>|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;|#},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:xmlns] = %r{((?:xmlns:)#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\??\*?\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    '/>' => :SLASH_GT,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI,
    '#'  => :HASH,
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:xmlns]}|#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|#{@@regex[:literal]}|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for'
              @token = [ :FOR, 'for' ]
            when 'return'
              @token = [ :RETURN, 'return' ]
            when 'in'
              @token = [ :IN, 'in' ]
            when 'let'
              @token = [ :LET, 'let' ]
            when 'except'
              @token = [ :EXCEPT, 'except' ]
            when 'every'
              @token = [ :EVERY, 'every' ]
            when 'some'
              @token = [ :SOME, 'some' ]
            when 'satisfies'
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if'
              @token = [ :IF, 'if' ]
            when 'then'
              @token = [ :THEN, 'then' ]
            when 'else'
              @token = [ :ELSE, 'else' ]
            when 'to'
              @token = [ :TO, 'to' ]
            when 'and'
              @token = [ :AND, 'and' ]
            when 'or'
              @token = [ :OR, 'or' ]
            when 'mod'
              @token = [ :MOD, 'mod' ]
            when 'div'
              @token = [ :DIV, 'div' ]
            when 'err'
              @token = [ :ERR, 'err' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          @token = [ :XMLNS_COLON_NCNAME, res[1] ]
        elsif !res[2].nil?
          if res[2] == 'if'
            @token = [ :IF, 'if' ]
          else
            if @source[@curpos+res[2].length .. @curpos+res[2].length + 1] =~ /^(\??\*?)/
              @token = [ :FUNCTION_NAME, res[2]+$1 ]
            else
              @token = [ :FUNCTION_NAME, res[2] ]
            end
          end
        elsif !res[3].nil?
          @token = [ res[3] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[3] ]
        elsif !res[4].nil?
          @token = [ :NAME_COLON_STAR, res[4] ]
        elsif !res[5].nil?
          qname = res[5]
          case qname
            when 'for'
              @token = [ :FOR, 'for' ]
            when 'return'
              @token = [ :RETURN, 'return' ]
            when 'in'
              @token = [ :IN, 'in' ]
            when 'let'
              @token = [ :LET, 'let' ]
            when 'except'
              @token = [ :EXCEPT, 'except' ]
            when 'every'
              @token = [ :EVERY, 'every' ]
            when 'some'
              @token = [ :SOME, 'some' ]   
            when 'satisfies'
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if'
              @token = [ :IF, 'if' ]
            when 'then'
              @token = [ :THEN, 'then' ]
            when 'else'
              @token = [ :ELSE, 'else' ]
            when 'with'
              @token = [ :WITH, 'with' ]
            when 'err'
              @token = [ :ERR, 'err' ]
            else
              @token = [ :QNAME, qname ]
          end
        elsif !res[6].nil?
          s = res[6]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s = s[1..s.length-2]
          s.gsub!(/\\n/, "\n")
          s.gsub!(/\\'/, "'")
          s.gsub!(/\\"/, '"')
          @line += s.split(/\n/).count
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
        elsif !res[7].nil?
          @token = [ :NUMBER, res[7] ]
        elsif !res[8].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[8] ]
        elsif !res[9].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[9] ]
        elsif !res[10].nil?
          @token = [ @@ops[res[10]] || res[10], res[10] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end engine-parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    70,    71,    39,    42,   179,    50,     5,     9,    70,    71,
    21,    31,   114,   170,    45,   140,    53,    70,    71,   140,
    66,    55,    29,    33,    36,    41,    72,   180,     2,   185,
   153,    18,    21,   178,   156,   129,    43,    47,    51,     1,
    10,    13,    93,    22,    26,    33,    78,    41,    39,    42,
   149,    50,     5,     9,     2,    57,    58,    31,    21,   160,
    45,   127,    53,   159,    51,     1,    10,    13,    29,    55,
    36,    33,    93,    41,     2,   150,   151,    18,    21,   -19,
   106,   107,    43,    47,    51,     1,    10,    13,    95,    22,
    26,    33,    42,    41,    50,    60,     9,    61,   -20,    86,
    87,    21,   -19,    88,    89,    90,    91,    82,    83,    84,
    85,    29,    55,    36,    33,    96,    41,     2,   148,   140,
    18,    21,    74,    75,    76,    43,    47,    51,     1,    10,
    13,   141,    22,    26,    33,    42,    41,    50,     5,     9,
     2,    57,    58,    31,    21,   147,    45,   146,    53,    97,
    51,     1,    10,    13,    29,    55,    36,    33,   142,    41,
     2,    70,    71,    18,    21,    74,    75,    76,    43,    47,
    51,     1,    10,    13,    93,    22,    26,    33,    42,    41,
    50,     5,     9,     2,    57,    58,    31,    21,    59,    45,
    93,    53,   112,    51,     1,    10,    13,    29,    55,    36,
    33,   114,    41,     2,    57,    58,    18,    21,    74,    75,
    76,    43,    47,    51,     1,    10,    13,   116,    22,    26,
    33,    42,    41,    50,     2,     9,    70,    71,    21,    82,
    83,    84,    85,   127,    51,     1,    10,    13,    21,    55,
    29,    33,    36,    41,    70,    71,     2,    70,    71,    55,
    21,    33,   175,    41,    43,    47,    51,     1,    10,    13,
   nil,    22,    26,    33,    42,    41,    50,     5,     9,     2,
    57,    58,    31,    21,   nil,    45,   nil,    53,   nil,    51,
     1,    10,    13,    29,    55,    36,    33,   nil,    41,     2,
    84,    85,    18,    21,    84,    85,   nil,    43,    47,    51,
     1,    10,    13,   nil,    22,    26,    33,    42,    41,    50,
     5,     9,     2,    98,    99,    31,    21,   nil,    45,   nil,
    53,   nil,    51,     1,    10,    13,    29,    55,    36,    33,
   nil,    41,     2,    57,    58,    18,    21,    84,    85,   nil,
    43,    47,    51,     1,    10,    13,   nil,    22,    26,    33,
    42,    41,    50,     5,     9,     2,    84,    85,    31,    21,
   nil,    45,   nil,    53,   nil,    51,     1,    10,    13,    29,
    55,    36,    33,   nil,    41,     2,    84,    85,    18,    21,
    84,    85,   nil,    43,    47,    51,     1,    10,    13,   nil,
    22,    26,    33,    42,    41,    50,     2,     9,    84,    85,
    21,    84,    85,    70,    71,   nil,    51,     1,    10,    13,
   nil,    55,    29,    33,    36,    41,    70,    71,     2,    70,
    71,    18,    21,    70,    71,   nil,    43,    47,    51,     1,
    10,    13,   nil,    22,    26,    33,    42,    41,    50,    21,
     9,    70,    71,    68,    69,   nil,    70,    71,   106,   107,
    55,   157,    33,   nil,    41,    29,   115,    36,    70,    71,
   nil,     2,    57,    58,    18,    21,    70,    71,   nil,    43,
    47,    51,     1,    10,    13,   nil,    22,    26,    33,    42,
    41,    50,     5,     9,    70,    71,   nil,    31,   nil,   nil,
    45,   nil,    53,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    36,   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,
   nil,   nil,    43,    47,    51,     1,    10,    13,   nil,    22,
    26,    33,    42,    41,    50,     5,     9,   nil,   nil,   nil,
    31,   nil,   nil,    45,   nil,    53,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,
    18,    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,
    13,   nil,    22,    26,    33,    42,    41,    50,     5,     9,
   nil,   nil,   nil,    31,   nil,   nil,    45,   nil,    53,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,
     2,   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,
    51,     1,    10,    13,   nil,    22,    26,    33,    42,    41,
    50,     5,     9,   nil,   nil,   nil,    31,   nil,   nil,    45,
   nil,    53,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,
   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,   nil,
   nil,    43,    47,    51,     1,    10,    13,   nil,    22,    26,
    33,    42,    41,    50,   nil,     9,    86,    87,   nil,   nil,
    88,    89,    90,    91,   nil,   nil,    84,    85,   nil,   nil,
    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,    18,
    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,
   nil,    22,    26,    33,    42,    41,    50,   nil,     9,    86,
    87,   nil,   nil,    88,    89,    90,    91,    82,    83,    84,
    85,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,
   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,
     1,    10,    13,   nil,    22,    26,    33,    42,    41,    50,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,
   nil,   nil,     2,   nil,   nil,    18,    21,   nil,   nil,   nil,
    43,    47,    51,     1,    10,    13,   nil,    22,    26,    33,
    42,    41,    50,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,   nil,    21,
   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,   nil,
    22,    26,    33,    42,    41,    50,     5,     9,   nil,   nil,
   nil,    31,   nil,   nil,    45,   nil,    53,   nil,   nil,   nil,
   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,   nil,
   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,     1,
    10,    13,   nil,    22,    26,    33,    42,    41,    50,     5,
     9,   nil,   nil,   nil,    31,   nil,   nil,    45,   nil,    53,
   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,
   nil,     2,   nil,   nil,    18,    21,   nil,   nil,   nil,    43,
    47,    51,     1,    10,    13,   nil,    22,    26,    33,    42,
    41,    50,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    36,   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,
   nil,   nil,    43,    47,    51,     1,    10,    13,   nil,    22,
    26,    33,    42,    41,    50,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,
    18,    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,
    13,   nil,    22,    26,    33,    42,    41,    50,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,
     2,   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,
    51,     1,    10,    13,   nil,    22,    26,    33,    42,    41,
    50,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,
   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,   nil,
   nil,    43,    47,    51,     1,    10,    13,   nil,    22,    26,
    33,    42,    41,    50,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,    18,
    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,
   nil,    22,    26,    33,    42,    41,    50,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,
   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,
     1,    10,    13,   nil,    22,    26,    33,    42,    41,    50,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,
   nil,   nil,     2,   nil,   nil,    18,    21,   nil,   nil,   nil,
    43,    47,    51,     1,    10,    13,   nil,    22,    26,    33,
    42,    41,    50,     5,     9,   nil,   nil,   nil,    31,   nil,
   nil,    45,   nil,    53,   nil,   nil,   nil,   nil,   nil,    29,
   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,    18,    21,
   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,   nil,
    22,    26,    33,    42,    41,    50,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,   nil,
   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,     1,
    10,    13,   nil,    22,    26,    33,    42,    41,    50,     5,
     9,   nil,   nil,   nil,    31,   nil,   nil,    45,   nil,    53,
   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,
   nil,     2,   nil,   nil,    18,    21,   nil,   nil,   nil,    43,
    47,    51,     1,    10,    13,   nil,    22,    26,    33,    42,
    41,    50,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    36,   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,
   nil,   nil,    43,    47,    51,     1,    10,    13,   nil,    22,
    26,    33,    42,    41,    50,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,
    18,    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,
    13,   nil,    22,    26,    33,    42,    41,    50,     5,     9,
   nil,   nil,   nil,    31,   nil,   nil,    45,   nil,    53,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,
     2,   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,
    51,     1,    10,    13,   nil,    22,    26,    33,    42,    41,
    50,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,
   nil,   nil,   nil,     2,   nil,   nil,    18,    21,   nil,   nil,
   nil,    43,    47,    51,     1,    10,    13,   nil,    22,    26,
    33,    42,    41,    50,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,    36,   nil,   nil,   nil,     2,   nil,   nil,    18,
    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,
   nil,    22,    26,    33,    42,    41,    50,     5,     9,   nil,
   nil,   nil,    31,   nil,   nil,    45,   nil,    53,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,
   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,
     1,    10,    13,   nil,    22,    26,    33,    42,    41,    50,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    36,   nil,
   nil,    42,     2,    50,   nil,     9,    21,   nil,   nil,   nil,
    43,    47,    51,     1,    10,    13,   nil,    22,    26,    33,
    29,    41,    36,   nil,   nil,   nil,     2,   nil,   nil,   nil,
    21,   nil,   nil,   nil,    43,    47,    51,     1,    10,    13,
   nil,    22,    26,    33,    42,    41,    50,     5,     9,   nil,
   nil,   nil,    31,   nil,   nil,    45,   nil,    53,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    36,   nil,   nil,   nil,     2,
   nil,   nil,    18,    21,   nil,   nil,   nil,    43,    47,    51,
     1,    10,    13,   nil,    22,    26,    33,   nil,    41 ]

racc_action_check = [
   100,   100,    61,    61,   164,    61,    61,    61,   161,   161,
   102,    61,    80,   148,    61,   104,    61,   181,   181,   108,
    13,   102,    61,   102,    61,   102,    17,   164,    61,   181,
   104,    61,    61,   161,   108,    80,    61,    61,    61,    61,
    61,    61,   140,    61,    61,    61,    26,    61,     0,     0,
   100,     0,     0,     0,    69,   172,   172,     0,    69,   122,
     0,   103,     0,   120,    69,    69,    69,    69,     0,    69,
     0,    69,    31,    69,     0,   103,   103,     0,     0,   163,
    48,    48,     0,     0,     0,     0,     0,     0,    32,     0,
     0,     0,    95,     0,    95,     7,    95,     7,   165,   163,
   163,    10,   163,   163,   163,   163,   163,   163,   163,   163,
   163,    95,    10,    95,    10,    34,    10,    95,    99,    92,
    95,    95,   133,   133,   133,    95,    95,    95,    95,    95,
    95,    92,    95,    95,    95,   160,    95,   160,   160,   160,
   150,   105,   105,   160,   150,    98,   160,    97,   160,    36,
   150,   150,   150,   150,   160,   150,   160,   150,    93,   150,
   160,   173,   173,   160,   160,   132,   132,   132,   160,   160,
   160,   160,   160,   160,    45,   160,   160,   160,     9,   160,
     9,     9,     9,    43,   117,   117,     9,    43,     5,     9,
    53,     9,    60,    43,    43,    43,    43,     9,    43,     9,
    43,    62,    43,     9,   118,   118,     9,     9,    19,    19,
    19,     9,     9,     9,     9,     9,     9,    64,     9,     9,
     9,   159,     9,   159,   151,   159,   119,   119,   151,   183,
   183,   183,   183,    77,   151,   151,   151,   151,     1,   151,
   159,   151,   159,   151,   177,   177,   159,   174,   174,     1,
   159,     1,   157,     1,   159,   159,   159,   159,   159,   159,
   nil,   159,   159,   159,   156,   159,   156,   156,   156,    47,
     3,     3,   156,    47,   nil,   156,   nil,   156,   nil,    47,
    47,    47,    47,   156,    47,   156,    47,   nil,    47,   156,
   130,   130,   156,   156,   131,   131,   nil,   156,   156,   156,
   156,   156,   156,   nil,   156,   156,   156,   153,   156,   153,
   153,   153,    58,    39,    39,   153,    58,   nil,   153,   nil,
   153,   nil,    58,    58,    58,    58,   153,    58,   153,    58,
   nil,    58,   153,   101,   101,   153,   153,   134,   134,   nil,
   153,   153,   153,   153,   153,   153,   nil,   153,   153,   153,
   147,   153,   147,   147,   147,    57,   135,   135,   147,    57,
   nil,   147,   nil,   147,   nil,    57,    57,    57,    57,   147,
    57,   147,    57,   nil,    57,   147,   136,   136,   147,   147,
   137,   137,   nil,   147,   147,   147,   147,   147,   147,   nil,
   147,   147,   147,    74,   147,    74,    68,    74,   138,   138,
    68,   139,   139,   158,   158,   nil,    68,    68,    68,    68,
   nil,    68,    74,    68,    74,    68,   167,   167,    74,   168,
   168,    74,    74,   169,   169,   nil,    74,    74,    74,    74,
    74,    74,   nil,    74,    74,    74,    18,    74,    18,    14,
    18,   111,   111,    14,    14,   nil,    63,    63,   144,   144,
    14,   111,    14,   nil,    14,    18,    63,    18,    15,    15,
   nil,    18,   171,   171,    18,    18,    81,    81,   nil,    18,
    18,    18,    18,    18,    18,   nil,    18,    18,    18,   141,
    18,   141,   141,   141,   186,   186,   nil,   141,   nil,   nil,
   141,   nil,   141,   nil,   nil,   nil,   nil,   nil,   141,   nil,
   141,   nil,   nil,   nil,   141,   nil,   nil,   141,   141,   nil,
   nil,   nil,   141,   141,   141,   141,   141,   141,   nil,   141,
   141,   141,   127,   141,   127,   127,   127,   nil,   nil,   nil,
   127,   nil,   nil,   127,   nil,   127,   nil,   nil,   nil,   nil,
   nil,   127,   nil,   127,   nil,   nil,   nil,   127,   nil,   nil,
   127,   127,   nil,   nil,   nil,   127,   127,   127,   127,   127,
   127,   nil,   127,   127,   127,    29,   127,    29,    29,    29,
   nil,   nil,   nil,    29,   nil,   nil,    29,   nil,    29,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    29,   nil,   nil,   nil,
    29,   nil,   nil,    29,    29,   nil,   nil,   nil,    29,    29,
    29,    29,    29,    29,   nil,    29,    29,    29,   114,    29,
   114,   114,   114,   nil,   nil,   nil,   114,   nil,   nil,   114,
   nil,   114,   nil,   nil,   nil,   nil,   nil,   114,   nil,   114,
   nil,   nil,   nil,   114,   nil,   nil,   114,   114,   nil,   nil,
   nil,   114,   114,   114,   114,   114,   114,   nil,   114,   114,
   114,   107,   114,   107,   nil,   107,   143,   143,   nil,   nil,
   143,   143,   143,   143,   nil,   nil,   143,   143,   nil,   nil,
   107,   nil,   107,   nil,   nil,   nil,   107,   nil,   nil,   107,
   107,   nil,   nil,   nil,   107,   107,   107,   107,   107,   107,
   nil,   107,   107,   107,   106,   107,   106,   nil,   106,    30,
    30,   nil,   nil,    30,    30,    30,    30,    30,    30,    30,
    30,   nil,   nil,   106,   nil,   106,   nil,   nil,   nil,   106,
   nil,   nil,   106,   106,   nil,   nil,   nil,   106,   106,   106,
   106,   106,   106,   nil,   106,   106,   106,   179,   106,   179,
   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   179,   nil,   179,   nil,
   nil,   nil,   179,   nil,   nil,   179,   179,   nil,   nil,   nil,
   179,   179,   179,   179,   179,   179,   nil,   179,   179,   179,
    96,   179,    96,   nil,    96,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,
   nil,    96,   nil,   nil,   nil,    96,   nil,   nil,   nil,    96,
   nil,   nil,   nil,    96,    96,    96,    96,    96,    96,   nil,
    96,    96,    96,   175,    96,   175,   175,   175,   nil,   nil,
   nil,   175,   nil,   nil,   175,   nil,   175,   nil,   nil,   nil,
   nil,   nil,   175,   nil,   175,   nil,   nil,   nil,   175,   nil,
   nil,   175,   175,   nil,   nil,   nil,   175,   175,   175,   175,
   175,   175,   nil,   175,   175,   175,    41,   175,    41,    41,
    41,   nil,   nil,   nil,    41,   nil,   nil,    41,   nil,    41,
   nil,   nil,   nil,   nil,   nil,    41,   nil,    41,   nil,   nil,
   nil,    41,   nil,   nil,    41,    41,   nil,   nil,   nil,    41,
    41,    41,    41,    41,    41,   nil,    41,    41,    41,    91,
    41,    91,   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   nil,
    91,   nil,   nil,   nil,    91,   nil,   nil,    91,    91,   nil,
   nil,   nil,    91,    91,    91,    91,    91,    91,   nil,    91,
    91,    91,    90,    91,    90,   nil,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    90,   nil,    90,   nil,   nil,   nil,    90,   nil,   nil,
    90,    90,   nil,   nil,   nil,    90,    90,    90,    90,    90,
    90,   nil,    90,    90,    90,    89,    90,    89,   nil,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    89,   nil,    89,   nil,   nil,   nil,
    89,   nil,   nil,    89,    89,   nil,   nil,   nil,    89,    89,
    89,    89,    89,    89,   nil,    89,    89,    89,    88,    89,
    88,   nil,    88,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,    88,
   nil,   nil,   nil,    88,   nil,   nil,    88,    88,   nil,   nil,
   nil,    88,    88,    88,    88,    88,    88,   nil,    88,    88,
    88,    87,    88,    87,   nil,    87,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    87,   nil,    87,   nil,   nil,   nil,    87,   nil,   nil,    87,
    87,   nil,   nil,   nil,    87,    87,    87,    87,    87,    87,
   nil,    87,    87,    87,    86,    87,    86,   nil,    86,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    86,   nil,    86,   nil,   nil,   nil,    86,
   nil,   nil,    86,    86,   nil,   nil,   nil,    86,    86,    86,
    86,    86,    86,   nil,    86,    86,    86,    85,    86,    85,
   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    85,   nil,    85,   nil,
   nil,   nil,    85,   nil,   nil,    85,    85,   nil,   nil,   nil,
    85,    85,    85,    85,    85,    85,   nil,    85,    85,    85,
    59,    85,    59,    59,    59,   nil,   nil,   nil,    59,   nil,
   nil,    59,   nil,    59,   nil,   nil,   nil,   nil,   nil,    59,
   nil,    59,   nil,   nil,   nil,    59,   nil,   nil,    59,    59,
   nil,   nil,   nil,    59,    59,    59,    59,    59,    59,   nil,
    59,    59,    59,    84,    59,    84,   nil,    84,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    84,   nil,    84,   nil,   nil,   nil,    84,   nil,
   nil,    84,    84,   nil,   nil,   nil,    84,    84,    84,    84,
    84,    84,   nil,    84,    84,    84,   185,    84,   185,   185,
   185,   nil,   nil,   nil,   185,   nil,   nil,   185,   nil,   185,
   nil,   nil,   nil,   nil,   nil,   185,   nil,   185,   nil,   nil,
   nil,   185,   nil,   nil,   185,   185,   nil,   nil,   nil,   185,
   185,   185,   185,   185,   185,   nil,   185,   185,   185,    83,
   185,    83,   nil,    83,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,
    83,   nil,   nil,   nil,    83,   nil,   nil,    83,    83,   nil,
   nil,   nil,    83,    83,    83,    83,    83,    83,   nil,    83,
    83,    83,    82,    83,    82,   nil,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    82,   nil,    82,   nil,   nil,   nil,    82,   nil,   nil,
    82,    82,   nil,   nil,   nil,    82,    82,    82,    82,    82,
    82,   nil,    82,    82,    82,    78,    82,    78,    78,    78,
   nil,   nil,   nil,    78,   nil,   nil,    78,   nil,    78,   nil,
   nil,   nil,   nil,   nil,    78,   nil,    78,   nil,   nil,   nil,
    78,   nil,   nil,    78,    78,   nil,   nil,   nil,    78,    78,
    78,    78,    78,    78,   nil,    78,    78,    78,    76,    78,
    76,   nil,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,    76,
   nil,   nil,   nil,    76,   nil,   nil,    76,    76,   nil,   nil,
   nil,    76,    76,    76,    76,    76,    76,   nil,    76,    76,
    76,    75,    76,    75,   nil,    75,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,   nil,    75,   nil,   nil,   nil,    75,   nil,   nil,    75,
    75,   nil,   nil,   nil,    75,    75,    75,    75,    75,    75,
   nil,    75,    75,    75,    70,    75,    70,    70,    70,   nil,
   nil,   nil,    70,   nil,   nil,    70,   nil,    70,   nil,   nil,
   nil,   nil,   nil,    70,   nil,    70,   nil,   nil,   nil,    70,
   nil,   nil,    70,    70,   nil,   nil,   nil,    70,    70,    70,
    70,    70,    70,   nil,    70,    70,    70,    71,    70,    71,
   nil,    71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,    71,   nil,
   nil,    72,    71,    72,   nil,    72,    71,   nil,   nil,   nil,
    71,    71,    71,    71,    71,    71,   nil,    71,    71,    71,
    72,    71,    72,   nil,   nil,   nil,    72,   nil,   nil,   nil,
    72,   nil,   nil,   nil,    72,    72,    72,    72,    72,    72,
   nil,    72,    72,    72,   142,    72,   142,   142,   142,   nil,
   nil,   nil,   142,   nil,   nil,   142,   nil,   142,   nil,   nil,
   nil,   nil,   nil,   142,   nil,   142,   nil,   nil,   nil,   142,
   nil,   nil,   142,   142,   nil,   nil,   nil,   142,   142,   142,
   142,   142,   142,   nil,   142,   142,   142,   nil,   142 ]

racc_action_pointer = [
    41,   201,   nil,   229,   nil,   176,   nil,    95,   nil,   170,
    64,   nil,   nil,   -27,   402,   455,   nil,   -14,   428,   171,
   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,   557,
   674,    64,    66,   nil,    75,   nil,    99,   nil,   nil,   305,
   nil,   858,   nil,   150,   nil,   166,   nil,   236,    57,   nil,
   nil,   nil,   nil,   182,   nil,   nil,   nil,   322,   279,  1202,
   192,    -5,   196,   443,   204,   nil,   nil,   nil,   363,    21,
  1546,  1589,  1613,   nil,   385,  1503,  1460,   206,  1417,   nil,
     7,   463,  1374,  1331,  1245,  1159,  1116,  1073,  1030,   987,
   944,   901,   114,   140,   nil,    84,   772,    96,   139,   112,
    -3,   292,   -27,    34,    10,   100,   686,   643,    14,   nil,
   nil,   438,   nil,   nil,   600,   nil,   nil,   143,   163,   223,
    58,   nil,    53,   nil,   nil,   nil,   nil,   514,   nil,   nil,
   255,   259,   128,    85,   302,   321,   341,   345,   363,   366,
    34,   471,  1656,   631,   425,   nil,   nil,   342,     3,   nil,
   107,   191,   nil,   299,   nil,   nil,   256,   238,   400,   213,
   127,     5,   nil,    74,    -1,    93,   nil,   413,   416,   420,
   nil,   421,    14,   158,   244,   815,   nil,   241,   nil,   729,
   nil,    14,   nil,   196,   nil,  1288,   481 ]

racc_action_default = [
    -3,  -107,   -79,   -67,   -38,  -107,   -13,  -107,   -92,   -99,
  -107,   -68,    -1,  -107,  -107,    -4,   -74,   -58,  -107,   -49,
    -5,  -106,   -94,   -85,   -52,    -6,   -95,   -80,   -56,  -107,
   -42,  -107,    -7,  -103,   -59,    -8,  -107,   -91,   -62,  -107,
    -9,  -107,   -89,   -69,   -85,  -107,   -10,  -107,   -33,   -11,
   -93,   -78,   -35,  -107,   -12,  -104,   -82,  -107,  -107,  -107,
  -107,    -3,  -100,  -101,  -107,   -83,   -84,   -81,  -107,  -107,
  -107,  -107,  -107,   -57,  -107,  -107,  -107,   -77,   -99,   -97,
  -107,  -101,  -107,  -107,  -107,  -107,  -107,  -107,  -107,  -107,
  -107,  -107,  -107,  -107,   -28,  -107,  -107,  -107,  -107,  -107,
  -107,   -70,  -107,   -64,  -107,   -71,  -107,  -107,  -107,   -75,
   -76,  -107,   187,    -2,  -107,   -90,   -98,   -72,   -73,   -14,
   -15,   -16,  -107,   -60,   -53,   -54,   -55,  -107,   -86,   -41,
   -47,   -48,   -50,   -51,   -39,   -40,   -43,   -44,   -45,   -46,
  -107,  -107,  -107,   -42,   -34,   -61,   -96,  -107,  -107,  -105,
  -107,  -107,   -63,  -107,   -36,   -37,  -107,  -107,  -102,  -107,
  -107,  -107,   -21,   -42,  -107,    -8,   -29,   -27,   -30,   -23,
   -24,   -65,   -66,   -31,   -32,  -107,   -17,   -18,   -87,  -107,
   -88,   -26,   -22,   -19,   -20,  -107,   -25 ]

racc_goto_table = [
    63,   101,    56,   102,   121,   105,    12,   102,   122,   123,
   162,    65,   165,   144,    73,    67,    80,   102,   102,    77,
    81,   154,   155,   109,   110,   152,   117,   118,   102,   102,
   130,   131,   100,   145,   134,   135,   136,   137,   138,   139,
   103,   132,   133,   143,    92,   166,   164,   120,     7,    79,
   111,   nil,   nil,   nil,   143,   143,   nil,   nil,   104,   nil,
   nil,   119,   182,   nil,   184,   nil,   108,   113,   nil,    81,
   124,   125,   126,   nil,   nil,   163,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   176,   nil,   nil,   nil,   122,   nil,   nil,   nil,
   nil,   nil,   nil,    67,   nil,   158,   nil,   nil,   171,   172,
   102,   102,   nil,   nil,   nil,   nil,   nil,   nil,   161,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   nil,   167,   168,   nil,   nil,   nil,   nil,   169,   nil,
   nil,   nil,   nil,   nil,   173,   nil,   nil,   174,   nil,   nil,
   nil,   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   186 ]

racc_goto_check = [
     3,    34,    39,    36,    14,    34,     2,    36,    15,    15,
    16,    39,     7,    21,    27,    39,    25,    36,    36,    32,
     3,    22,    22,    37,    37,    33,    34,    34,    36,    36,
    17,    17,     3,    15,    17,    17,    17,    17,    17,    17,
    32,    26,    26,    17,    19,    20,    18,    13,     1,    41,
     3,   nil,   nil,   nil,    17,    17,   nil,   nil,    19,   nil,
   nil,     3,    16,   nil,     7,   nil,    19,     2,   nil,     3,
    27,    27,    27,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    39,   nil,     3,   nil,   nil,    34,    34,
    36,    36,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,   nil,     3,     3,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,     3,   nil,   nil,     3,   nil,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    48,     6,    -9,   nil,   nil,   nil,  -115,   nil,   nil,
   nil,   nil,   nil,   -24,   -67,   -63,  -117,   -52,   -81,    13,
   -95,   -82,   -85,   nil,   nil,   -13,   -43,    -4,   nil,   nil,
   nil,   nil,    -4,   -78,   -42,   nil,   -40,   -34,   nil,     1,
   nil,    23,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    15,    20,    25,    32,    35,    40,    46,
    49,    54,     6,   nil,   nil,    17,   nil,    30,   nil,   nil,
    94,    48,    52,     4,     8,    62,    19,    24,    28,    34,
    38,    44,   nil,   nil,     3,    11,    14,    16,    23,    27,
   128,    37,    64 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 55, :_reduce_1,
  3, 55, :_reduce_2,
  0, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_6,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  3, 66, :_reduce_14,
  3, 65, :_reduce_15,
  1, 67, :_reduce_16,
  3, 67, :_reduce_17,
  3, 68, :_reduce_18,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 72, :_reduce_21,
  3, 72, :_reduce_22,
  4, 58, :_reduce_23,
  4, 59, :_reduce_24,
  8, 62, :_reduce_25,
  6, 62, :_reduce_26,
  4, 63, :_reduce_27,
  1, 73, :_reduce_28,
  3, 73, :_reduce_29,
  3, 74, :_reduce_30,
  4, 64, :_reduce_31,
  4, 64, :_reduce_32,
  1, 60, :_reduce_none,
  3, 60, :_reduce_34,
  1, 75, :_reduce_none,
  3, 75, :_reduce_36,
  3, 75, :_reduce_37,
  1, 76, :_reduce_none,
  3, 76, :_reduce_39,
  3, 76, :_reduce_40,
  3, 78, :_reduce_41,
  1, 77, :_reduce_none,
  3, 77, :_reduce_43,
  3, 77, :_reduce_44,
  3, 77, :_reduce_45,
  3, 77, :_reduce_46,
  3, 61, :_reduce_47,
  3, 61, :_reduce_48,
  1, 71, :_reduce_none,
  3, 71, :_reduce_50,
  3, 71, :_reduce_51,
  1, 80, :_reduce_none,
  3, 80, :_reduce_53,
  3, 80, :_reduce_54,
  3, 80, :_reduce_55,
  1, 81, :_reduce_none,
  2, 81, :_reduce_57,
  1, 82, :_reduce_none,
  1, 82, :_reduce_59,
  3, 83, :_reduce_60,
  3, 83, :_reduce_61,
  1, 69, :_reduce_62,
  3, 69, :_reduce_63,
  0, 87, :_reduce_none,
  2, 87, :_reduce_65,
  2, 87, :_reduce_66,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 89, :_reduce_69,
  2, 89, :_reduce_70,
  2, 89, :_reduce_71,
  3, 89, :_reduce_72,
  3, 89, :_reduce_73,
  1, 88, :_reduce_74,
  3, 88, :_reduce_75,
  3, 88, :_reduce_76,
  2, 91, :_reduce_77,
  1, 91, :_reduce_78,
  1, 91, :_reduce_79,
  1, 92, :_reduce_80,
  2, 92, :_reduce_81,
  2, 92, :_reduce_82,
  2, 92, :_reduce_83,
  2, 90, :_reduce_84,
  0, 86, :_reduce_85,
  2, 86, :_reduce_86,
  3, 94, :_reduce_87,
  3, 94, :_reduce_88,
  1, 85, :_reduce_89,
  3, 85, :_reduce_90,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 85, :_reduce_93,
  1, 85, :_reduce_94,
  1, 85, :_reduce_none,
  3, 85, :_reduce_96,
  2, 85, :_reduce_97,
  3, 95, :_reduce_98,
  0, 96, :_reduce_99,
  1, 96, :_reduce_none,
  1, 79, :_reduce_101,
  3, 79, :_reduce_102,
  1, 93, :_reduce_none,
  1, 93, :_reduce_104,
  3, 93, :_reduce_105,
  1, 93, :_reduce_none ]

racc_reduce_n = 107

racc_shift_n = 187

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :ERR => 3,
  :WITH => 4,
  :COMMA => 5,
  :COLON_EQUAL => 6,
  :LET => 7,
  :DOLLAR_QNAME => 8,
  :XMLNS_COLON_NCNAME => 9,
  :LITERAL => 10,
  :IF => 11,
  :LP => 12,
  :RP => 13,
  :THEN => 14,
  :ELSE => 15,
  :FOR => 16,
  :RETURN => 17,
  :IN => 18,
  :SOME => 19,
  :SATISFIES => 20,
  :EVERY => 21,
  :OR => 22,
  :AND => 23,
  :EXCEPT => 24,
  :EQ => 25,
  :NEQ => 26,
  :LB => 27,
  :RB => 28,
  :LT => 29,
  :GT => 30,
  :LTE => 31,
  :GTE => 32,
  :DOT_DOT => 33,
  :TO => 34,
  :PLUS => 35,
  :MINUS => 36,
  :STAR => 37,
  :DIV => 38,
  :MOD => 39,
  :PIPE => 40,
  :SLASH => 41,
  :SLASH_SLASH => 42,
  :DOT => 43,
  :AT => 44,
  :HASH => 45,
  :AXIS_NAME => 46,
  :COLON_COLON => 47,
  :NUMBER => 48,
  :FUNCTION_NAME => 49,
  :QNAME => 50,
  :SLASH_GT => 51,
  :LC => 52,
  :RC => 53 }

racc_nt_base = 54

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "ERR",
  "WITH",
  "COMMA",
  "COLON_EQUAL",
  "LET",
  "DOLLAR_QNAME",
  "XMLNS_COLON_NCNAME",
  "LITERAL",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LB",
  "RB",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "HASH",
  "AXIS_NAME",
  "COLON_COLON",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "SLASH_GT",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "ns_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "with_expr",
  "err_expr",
  "expr_set_list",
  "expr_set",
  "path_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "tuple",
  "args",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 12)
  def _reduce_1(val, _values, result)
     result = Utukku::Engine::Parser::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 13)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 28)
  def _reduce_14(val, _values, result)
     result = Utukku::Engine::Parser::ErrExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 30)
  def _reduce_15(val, _values, result)
     result = Utukku::Engine::Parser::WithExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = Utukku::Engine::Parser::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 33)
  def _reduce_17(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 35)
  def _reduce_18(val, _values, result)
     result = Utukku::Engine::Parser::DataSet.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 42)
  def _reduce_21(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 43)
  def _reduce_22(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 45)
  def _reduce_23(val, _values, result)
     result = Utukku::Engine::Parser::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 48)
  def _reduce_24(val, _values, result)
        @context.set_ns(val[1].gsub(/^xmlns:/, ''), val[3])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 51)
  def _reduce_25(val, _values, result)
     result = Utukku::Engine::Parser::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 52)
  def _reduce_26(val, _values, result)
     result = Utukku::Engine::Parser::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 54)
  def _reduce_27(val, _values, result)
     result = Utukku::Engine::Parser::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 56)
  def _reduce_28(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 57)
  def _reduce_29(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 59)
  def _reduce_30(val, _values, result)
     result = Utukku::Engine::Parser::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 61)
  def _reduce_31(val, _values, result)
     result = Utukku::Engine::Parser::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 62)
  def _reduce_32(val, _values, result)
     result = Utukku::Engine::Parser::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 65)
  def _reduce_34(val, _values, result)
     result = Utukku::Engine::Parser::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 68)
  def _reduce_36(val, _values, result)
     result = Utukku::Engine::Parser::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 69)
  def _reduce_37(val, _values, result)
     result = Utukku::Engine::Parser::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 72)
  def _reduce_39(val, _values, result)
     result = Utukku::Engine::Parser::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 73)
  def _reduce_40(val, _values, result)
     result = Utukku::Engine::Parser::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 75)
  def _reduce_41(val, _values, result)
     result = Utukku::Engine::Parser::Tuple.new(val[1]) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 80)
  def _reduce_43(val, _values, result)
     result = Utukku::Engine::Parser::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 81)
  def _reduce_44(val, _values, result)
     result = Utukku::Engine::Parser::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 82)
  def _reduce_45(val, _values, result)
     result = Utukku::Engine::Parser::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 83)
  def _reduce_46(val, _values, result)
     result = Utukku::Engine::Parser::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 94)
  def _reduce_47(val, _values, result)
     result = Utukku::Engine::Parser::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 95)
  def _reduce_48(val, _values, result)
     result = Utukku::Engine::Parser::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 98)
  def _reduce_50(val, _values, result)
     result = Utukku::Engine::Parser::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 99)
  def _reduce_51(val, _values, result)
     result = Utukku::Engine::Parser::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 102)
  def _reduce_53(val, _values, result)
     result = Utukku::Engine::Parser::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 103)
  def _reduce_54(val, _values, result)
     result = Utukku::Engine::Parser::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 104)
  def _reduce_55(val, _values, result)
     result = Utukku::Engine::Parser::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 107)
  def _reduce_57(val, _values, result)
     result = Utukku::Engine::Parser::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 110)
  def _reduce_59(val, _values, result)
     result = Utukku::Engine::Parser::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 112)
  def _reduce_60(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 113)
  def _reduce_61(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 115)
  def _reduce_62(val, _values, result)
     result = Utukku::Engine::Parser::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 116)
  def _reduce_63(val, _values, result)
     result = ((val[1].nil? || val[1].empty?) && (val[2].nil? || val[2].empty?)) ? val[0] : Utukku::Engine::Parser::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 119)
  def _reduce_65(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 120)
  def _reduce_66(val, _values, result)
     result = [ Utukku::Engine::Parser::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 128)
  def _reduce_69(val, _values, result)
     result = Utukku::Engine::Parser::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 129)
  def _reduce_70(val, _values, result)
     result = Utukku::Engine::Parser::PathExpr.new(Utukku::Engine::Parser::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 130)
  def _reduce_71(val, _values, result)
     result = [ Utukku::Engine::Parser::RootContext.new, Utukku::Engine::Parser::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 131)
  def _reduce_72(val, _values, result)
     result = [ Utukku::Engine::Parser::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 132)
  def _reduce_73(val, _values, result)
     result = [ Utukku::Engine::Parser::RootContext.new(val[0]), Utukku::Engine::Parser::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 134)
  def _reduce_74(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 135)
  def _reduce_75(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 136)
  def _reduce_76(val, _values, result)
     result = val[0] + [ Utukku::Engine::Parser::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 138)
  def _reduce_77(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Utukku::Engine::Parser::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 139)
  def _reduce_78(val, _values, result)
     result = Utukku::Engine::Parser::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 140)
  def _reduce_79(val, _values, result)
     result = Utukku::Engine::Parser::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 146)
  def _reduce_80(val, _values, result)
     result = Utukku::Engine::Parser::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 147)
  def _reduce_81(val, _values, result)
     result = Utukku::Engine::Parser::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 148)
  def _reduce_82(val, _values, result)
     result = Utukku::Engine::Parser::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 149)
  def _reduce_83(val, _values, result)
     result = Utukku::Engine::Parser::AxisMethod.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 151)
  def _reduce_84(val, _values, result)
     result = Utukku::Engine::Parser::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 153)
  def _reduce_85(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 154)
  def _reduce_86(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 156)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 157)
  def _reduce_88(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 164)
  def _reduce_89(val, _values, result)
     result = Utukku::Engine::Parser::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 165)
  def _reduce_90(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 168)
  def _reduce_93(val, _values, result)
     result = Utukku::Engine::Parser::Literal.new(val[0], [ Utukku::Engine::NS::FAB, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 169)
  def _reduce_94(val, _values, result)
     result = Utukku::Engine::Parser::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Utukku::Engine::NS::FAB, 'numeric' ]) 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 171)
  def _reduce_96(val, _values, result)
     val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 173)
  def _reduce_97(val, _values, result)
            result = Utukku::Engine::Parser::Function.new(@context, val[0], val[1]) 
#          when 'any' : Utukku::Engine::Parser::AnyExpr.new(@context, val[1])
#          when 'all' : Utukku::Engine::Parser::AllExpr.new(@context, val[1])
#          when 'one' : Utukku::Engine::Parser::OneExpr.new(@context, val[1])
#          when 'none': Utukku::Engine::Parser::NoneExpr.new(@context, val[1])
#          else Utukku::Engine::Parser::Function.new(@context, val[0], val[1]) 
#        end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 182)
  def _reduce_98(val, _values, result)
     result = Utukku::Engine::Parser::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 185)
  def _reduce_99(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 188)
  def _reduce_101(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 189)
  def _reduce_102(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'engine-parser.racc', 192)
  def _reduce_104(val, _values, result)
     result = val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'engine-parser.racc', 193)
  def _reduce_105(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 106 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Engine
  end   # module Utukku
