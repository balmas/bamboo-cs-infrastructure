%strict
%prefix Utukku::Engine::Parser::

%left ','
%token NUMBER 
%token DOLLAR_QNAME
%token DOLLAR_INT
%token FUNCTION_NAME
%token XMLNS
%token QNAME
%token NCNAME
%token AXIS_NAME
%left 'if' 'then' 'else'
%left 'err' 'with'
%right ':='
%left '|'
%left TO
%left 'mod'
%left MPY 'div'
%left '+' '-'
%nonassoc '<'
%nonassoc '>'
%nonassoc '<='
%nonassoc '>='
%nonassoc '='
%nonassoc '!='

# '*' is MPY if it is not preceeded or succeeded by a '/'

%token LITERAL

%start statements

%%

statements: statement <+ ';'> { Utukku::Engine::Block -> new( statements => [ grep { ref $_ } @{$_[1]} ] ) }
  ;

statement: 
  | expr
  | let_expr
  | ns_expr
  ;

expr: or_expr
  | range_expr
  | if_expr
  | for_expr
  | quant_expr
  | with_expr
  | err_expr
  ;

  #| union_expr

err_lhs: or_expr
  | range_expr
  | '(' expr ')'
  ;

err_expr: err_lhs <+ 'err'> { (@{$_[1]} > 1) ? Utukku::Engine::Parser::ErrExpr -> new( expr => $_[1]) : $_[1]->[0] }
  ;

with_expr: expr 'with' expr_set_list { Utukku::Engine::Parser::WithExpr -> new( expr => $_[1], annotations => $_[3] ) }
  ;

expr_set_list: expr_set <+ ','> 
  ;

expr_set: relative_location_path ':=' expr { Utukku::Engine::Parser::MemSet -> new( path => $_[1], expr => $_[3] ) }
  ;

num_expr: additive_expr
  | range_expr
  ;

num_list: num_expr <+ ','>
  ;



let_expr: 'let' DOLLAR_QNAME.name ':=' expr.expr { Utukku::Engine::Parser::VarSet -> new( name => $name, expr => $expr ) }
  ;

ns_expr: 'let' XMLNS.prefix ':=' LITERAL.uri { $_[0] -> add_ns( $prefix, $uri ); undef }
  ;

if_expr: 'if' '(' expr.test ')' 'then' additive_expr.then 'else' additive_expr.else { Utukku::Engine::Parser::IfExpr -> new( test => $test, then => $then, else => $else ) }
  | 'if' '(' expr.test ')' 'then' additive_expr.then { Utukku::Engine::Parser::IfExpr -> new( test => $test, then => $then ) }
  ;

for_expr: 'for' for_vars.vars 'return' expr.expr { Utukku::Engine::Parser::ForExpr -> new( vars => $vars, expr => $expr ) }
  ;

for_vars: for_var
  | '(' for_var <+ ','> ')'
  ;

for_var: DOLLAR_QNAME 'in' expr { [ $_[1], $_[3] ] }
  ;

quant_expr: 'some' for_vars 'satisfies' expr { Utukku::Engine::Parser::SomeExpr -> new( vars => $_[2], expr => $_[4] ) }
  | 'every' for_vars 'satisfies' expr { Utukku::Engine::Parser::EveryExpr -> new( vars => $_[2], expr => $_[4] ) }
  ;

or_expr: and_expr <+ 'or'> { @{$_[1]} > 1 ? Utukku::Engine::Parser::OrExpr -> new( exprs => $_[1] ) : $_[1] -> [0] -> simplify }
  ;

and_expr: equality_expr { Utukku::Engine::Parser::AndExpr -> new( expr => $_[1] ) }
  | and_expr 'and' equality_expr { $_[1] -> add_and( $_[3] ) }
  | and_expr 'except' equality_expr { $_[1] -> add_except( $_[3] ) }
  ;

equality_expr: relational_expr 
  | additive_expr.left '=' additive_expr.right { Utukku::Engine::Parser::EqExpr -> new( left => $left, right => $right ) }
  | additive_expr.left '!=' additive_expr.right { Utukku::Engine::Parser::NeqExpr -> new( left => $left, right => $right ) }
  ;

tuple: '[' list ']' { Utukku::Engine::Parser::Tuple -> new( values => $_[2] ) }
  ;

list: expr <+ ','> { [ grep { ref $_ } @{$_[1]} ] }
  ;

relational_expr: additive_expr 
  | additive_expr '<' additive_expr { Utukku::Engine::Parser::LtExpr -> new( left => $_[1], right => $_[3] ) }
  | additive_expr '>' additive_expr { Utukku::Engine::Parser::LtExpr -> new( right => $_[1], left => $_[3] ) }
  | additive_expr '<=' additive_expr { Utukku::Engine::Parser::LteExpr -> new( left => $_[1], right => $_[3] ) }
  | additive_expr '>=' additive_expr { Utukku::Engine::Parser::LteExpr -> new( right => $_[1], left => $_[3] ) }
  ;

range_expr: unary_expr TO unary_expr { Utukku::Engine::Parser::RangeExpr -> new( begin => $_[1], end => $_[3] ) }
  | unary_expr TO unary_expr 'by' unary_expr { Utukku::Engine::Parser::RangeExpr -> new( begin => $_[1], end => $_[3], incr => $_[5] ) }
  | unary_expr TO { Utukku::Engine::Parser::SemiRangeExpr -> new( begin => $_[1] ) }
  | unary_expr TO 'by' unary_expr { Utukku::Engine::Parser::SemiRangeExpr -> new( begin => $_[1], incr => $_[4] ) }
  ;

additive_expr: multiplicative_expr 
  | additive_expr '+' multiplicative_expr { Utukku::Engine::Parser::AddExpr -> new( left => $_[1], right => $_[3] ) }
  | additive_expr '-' multiplicative_expr { Utukku::Engine::Parser::SubExpr -> new( left => $_[1], right => $_[3] ) }
  ;

multiplicative_expr: mpy_term 
  | multiplicative_expr MPY mpy_term { Utukku::Engine::Parser::MpyExpr -> new( left => $_[1], right => $_[3] ) }
  | multiplicative_expr 'div' mpy_term  { Utukku::Engine::Parser::DivExpr -> new( left => $_[1], right => $_[3] ) }
  | multiplicative_expr 'mod' mpy_term { Utukku::Engine::Parser::ModExpr -> new( left => $_[1], right => $_[3] ) }
  ;

mpy_term: unary_expr
  | range_expr
  ;

unary_expr: union_expr 
  | '-' unary_expr { Utukku::Engine::Parser::NegateExpr -> new( expr => $_[2] ) }
  ;

union_expr: path_expr <+ '|'> { @{$_[1]} > 1 ? Utukku::Engine::Parser::UnionExpr -> new( exprs => $_[1] ) : $_[1] -> [0] }
  ;

path_expr: location_path 
  | primary_expr predicates segment { (defined($_[2]) || defined($_[3])) ? Utukku::Engine::Parser::PathExpr -> new( primary => $_[1], predicates => $_[2], segment => $_[3] ) : $_[1] }
  ;

segment:
  | '/' relative_location_path { Utukku::Engine::Parser::ChildSegment -> new( path => $_[2] ) }
  | '//' relative_location_path { Utukku::Engine::Parser::DescendentSegment -> new( path => $_[2] ) }
  ;

location_path: relative_location_path
  | absolute_location_path
  ;

absolute_location_path: '/' { Utukku::Engine::Parser::Root -> new() }
  | '/' relative_location_path { Utukku::Engine::Parser::ChildSegment -> new( path => $_[2], root => 'data' ) }
  | '//' relative_location_path { Utukku::Engine::Parser::DescendentSegment -> new( path => $_[2], root => 'data' ) }
  | axis_name '/' relative_location_path { Utukku::Engine::Parser::ChildSegment -> new( path => $_[3], root => $_[1] ) }
  | axis_name '//' relative_location_path { Utukku::Engine::Parser::DescendentSegment -> new( path => $_[3], root => $_[1] ) }
  ;

axis_name: AXIS_NAME '::' { $_[1] }
  ;

relative_location_path: step
  | relative_location_path '/' step { Utukku::Engine::Parser::ChildStep -> new( path => $_[1], step => $_[3] ) }
  | relative_location_path '//' step { Utukku::Engine::Parser::DescendentStep -> new( path => $_[1], step => $_[3] ) }
  ;

step: axis predicates { Utukku::Engine::Parser::Step -> new( step => $_[1], predicates => $_[2] ) }
  | '.' { Utukku::Engine::Parser::CurrentContext -> new() }
  | '..' { Utukku::Engine::Parser::ParentofContext -> new() }
  ;

axis: node_test { Utukku::Engine::Parser::NodeTest -> new( name => $_[1] ) }
  | axis_name node_test
  | '@' node_test { Utukku::Engine::Parser::AttributeTest -> new( name => $_[2] ) }
  ;

predicates: predicate* { @{$_[1]} ? Utukku::Engine::Parser::Predicates -> new( predicates => $_[1] ) : undef }
  ;

#num_expr: additive_expr
#  | range_expr
#  ;
#
#num_list: num_expr <+ ','> { Utukku::Engine::Parser::NumericSet -> new( values => $_[1] ) }
#  ;

predicate: '[' expr ']' { Utukku::Engine::Parser::FunctionalPredicate -> new( expr => $_[2] ) }
  | '[' num_list ']' { Utukku::Engine::Parser::IndexPredicate -> new( list => $_[2] ) }
  ;

plist: '(' opt_list ')' { $_[2] }
  ;

opt_list: (list)? 
  ;

primary_expr: $DOLLAR_QNAME { Utukku::Engine::Parser::VariableRef -> new( name => $DOLLAR_QNAME ) }
  | $DOLLAR_INT { Utukku::Engine::Parser::VariableRef -> new( name => $DOLLAR_INT ) }
  | '(' expr ')' { $_[2] }
  | tuple
  | plist
  | $LITERAL { Utukku::Engine::Parser::Literal -> new( value => $LITERAL ) }
  | $NUMBER { Utukku::Engine::Parser::Literal -> new( value => $NUMBER ) }
  | FUNCTION_NAME plist { Utukku::Engine::Parser::FunctionCall -> new( function => $_[1], args => $_[2][0][0], context => $_[0] -> context ) }
  ;


node_test: QNAME
  | NUMBER
  | '{' expr '}'
  | '*'
  ;

%%

  #| NUMBER
use lib './blib/lib';
use Utukku::Engine::Block;
use Utukku::Engine::Context;
use Utukku::Engine::Parser::BinExpr;
use Utukku::Engine::Parser::Literal;
use Utukku::Engine::Parser::RangeExpr;
use Utukku::Engine::Parser::IfExpr;
use Utukku::Engine::Parser::AndExpr;
use Utukku::Engine::Parser::UnionExpr;
use Utukku::Engine::Parser::VarSet;
use Utukku::Engine::Parser::VariableRef;
use Utukku::Engine::Parser::FunctionCall;
use Math::BigRat;
use Data::Dumper;
use Scalar::Util qw(blessed);

sub _Error {
  my $parser = shift;

  my $yydata = $parser->YYData;

    exists $yydata->{ERRMSG}
  and do {
      warn $yydata->{ERRMSG};
      delete $yydata->{ERRMSG};
      return;
  };

  my ($attr)=$parser->YYCurval;

  my $stoken = '';

  if (blessed($attr) && $attr->can('str')) {
     $stoken = " near '".$attr->str."'"
  }
  elsif (ref($attr) eq 'ARRAY') {
    $stoken = " near '".$attr->[0]."'";
  }
  else {    if ($attr) {
      $stoken = " near '$attr'";
    }
    else {
      $stoken = " near end of input";
    }
  }

  my @expected = map { ($_ ne '')? "'$_'" : q{'end of input'}} $parser->YYExpect
();
  my $expected = '';
  if (@expected) {
    $expected = (@expected >1) ? "Expected one of these terminals: @expected"
                              : "Expected terminal: @expected"
  }

  my $tline = '';
  if (blessed($attr) && $attr->can('line')) {
    $tline = " (line number ".$attr->line.")"
  }
  elsif (ref($attr) eq 'ARRAY') {
    $tline = " (line number ".$attr->[1].")";
  }
  else {
    # May be the parser object knows the line number ?
    my $lineno = $parser->line;
    $tline = " (line number $lineno)" if $lineno > 1;
  }

  local $" = ', ';
  die << "ERRMSG";

Syntax error$stoken$tline.
$expected
ERRMSG
}

#my $SIMPLE_TOKENS = qr{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|\*|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;};
my $SIMPLE_TOKENS = qr{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|\*|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|,|;};
my $NCNAME = qr/[a-zA-Z_][-a-zA-Z0-9_.]*/;
my $QNAME = qr/(?:${NCNAME}:)?${NCNAME}/;
my $XMLNS = qr/xmlns:${NCNAME}/;

my %reserved_words = map { $_ => $_ } qw(
  for   
  return
  by
  in    
  let   
  except
  every 
  some  
  satisfies
  if    
  then  
  else
  with 
  err  
  and  
  or   
  to   
  mod  
  div  
);

sub _Lexer {
  my($parser, $last) = @_;

  my($white_space, $new_line) = ();

  for($parser -> {_src}) {
    while( m/^(\s|\(:)/ ) {
      while( s/^\s// ) {
        if( s/^\n// ) {
          $new_line += 1;
          $parser -> {_line} += 1;
          $parser -> {_col} = 1;
        }
        else {
          $parser -> {_col} += 1;
        }
        $white_space += 1;
      }

      # skip comments delimited by (: :)
      # comments can be nested
      if( s/^\(:// ) {

        my $comment_depth = 1;
        $parser -> {_col} += 2;
        while( $comment_depth > 0 && $_ ne '' ) {
          if( s/^\(:// ) {
            $comment_depth += 1;
            $parser -> {_col} += 2;
          }
          if( s/^:\)// ) {
            $comment_depth -= 1;
            $parser -> {_col} += 2;
          }
          if( s/^\n// ) {
            $parser -> {_col} = 1;
            $parser -> {_line} += 1;
          }
          elsif( s/^.// ) {
            $parser -> {_col} += 1;
          }
        }

        if( $comment_depth > 0 ) {
          die "Unbalanced comment delimiters at line @{[$parser -> {_line}]}\n";
        }

        $white_space += 1;
      }
    }

    return ( '', undef ) if $_ =~ /^\s*$/;

    if($new_line) {
      if( grep { $_ eq ';' } $parser->YYExpect() ) {
        return (';', ';');
      }
    }

    if( $last -> [0] ne '/' && $last -> [0] ne '//' ) {
      s/^\*// and return ('MPY', '*');
      s/^(\.\.)(?!\/)// and return ('TO', '..');
      s/^(-?\d+\/\d+)(?!\/)// and return ('NUMBER', Math::BigRat -> new($1));
      s{^(-?\d+)\s+(\d+/\d+)(?!/)}{} and return ('NUMBER', Math::BigRat -> new($1) + Math::BigRat -> new($2));
    }
    if( s/^\*(?!\/)// ) {
      return ('MPY', '*');
    }
    s/^\*// and return ( 'MPY', '*' );
    if(/^(${NCNAME})(?![\[\/])/ && $reserved_words{$1}) {
      my $rw = $1;
      s/^$rw//;
      return ($rw eq 'to' ? 'TO' : $rw, $rw);
    }
    s/^(-?\d+(?:\.\d+)?|\.\d+)// and return ('NUMBER', Math::BigRat -> new($1));
    if(/^'/) {
      s/^'((?:[^']+|\\')*)'//;
      my $l = $1;
      $l =~ s/\\'/'/g;
      return ('LITERAL', $l);
    }
    if(/^"/) {
      s/^"((?:[^"]+|\\")*)"//;
      my $l = $1;
      $l =~ s/\\"/"/g;
      return ('LITERAL', $l);
    }
    s/^($SIMPLE_TOKENS)// and return ($1, $1);
    s/^\$($QNAME)// and return ('DOLLAR_QNAME', $1);
    s/^(\$\d+)// and return ('DOLLAR_INT', $1);
    s/^(${QNAME}\??\*?\s*(?=\([^:]))// and return ('FUNCTION_NAME', $1);
    s/^(${XMLNS})// and return ('XMLNS', $1);
    s/^(${QNAME})// and return ('QNAME', $1);
    s/^(${NCNAME})// and return ('NCNAME', $1);
    s/^(.)// and die "Unexpected character: '$1'\n";
  }
}

sub line { $_[0] -> { _line } }

sub add_ns {
  my($self, $prefix, $ns) = @_;

  # defining the same prefix twice in a given context is an error since
  # the order doesn't matter -- prefix definitions can come at the end
  # and still be useful at the beginning of the expression
  die "XML prefix '$prefix' is already defined\n" if defined $self -> context -> ns -> { $prefix };

  $self -> context -> add_ns($prefix, $ns);
}

sub context { $_[0] -> { _context } }

sub parse {
  my($self, $context, $src, $debug) = @_;
  my $last = [ '', undef ];

  $self -> { _line } = 1;
  $self -> { _col } = 1;
  $self -> { _src } = " " . $src;
  $self -> { _context } = $context;

  return $self -> YYParse(
    yylex => $debug ? sub { $last = [_Lexer(shift, $last)]; print join(" => ", @$last), "\n"; @$last; } : sub { $last = [_Lexer(shift, $last)]; @$last; },
    yyerror => \&_Error,
    yydebug => $debug,
  );
}
